from zope.interface import implements
from z3c.form import group, field
from zope import schema
from zope.interface import invariant, Invalid
from zope.schema.interfaces import IContextSourceBinder
from zope.schema.vocabulary import SimpleVocabulary, SimpleTerm

#if str($folderish) == 'True'
from plone.dexterity.content import Container
#else
from plone.dexterity.content import Item
#end if

from plone.app.textfield import RichText
from plone.namedfile.field import NamedImage, NamedFile
from plone.namedfile.field import NamedBlobImage, NamedBlobFile
from plone.namedfile.interfaces import IImageScaleTraversable

from z3c.relationfield.schema import RelationList, RelationChoice
from plone.formwidget.contenttree import ObjPathSourceBinder



from plone.supermodel import model
from Products.Five import BrowserView


from ${package_dotted_name} import MessageFactory as _


\# Interface class; used to define content-type schema.
class ${interface_name}(model.Schema, IImageScaleTraversable):
    """
    ${contenttype_description}
    """
    # If you want a schema-defined interface, delete the form.model
    # line below and delete the matching file in the models sub-directory.
    #
    # If you want a model-based interface, edit
    # models/${content_class_filename}.xml to define the content type
    # and add directives here as necessary.
    # model.load("models/${content_class_filename}.xml")
    pass

\# Custom content-type class; objects created for this content type will
\# be instances of this class. Use this class to add content-type specific
\# methods and properties. Put methods that are mainly useful for rendering
\# in separate view classes.
#if str($folderish) == 'True'
class ${contenttype_classname}(Container):
#else
class ${contenttype_classname}(Item):
#end if
    implements(${interface_name})
    # Add your class methods and properties here
    pass


\# View class
\# The view will automatically use a similarly named template in
\# templates called ${content_class_filename}view.pt .
\# Template filenames should be all lower case.
\# The view will render when you request a content object with this
\# interface with "/@@view" appended unless specified otherwise
\# using the configure.zcml file.
\# This will make this view the default view for your content-type

class ${contenttype_classname}View(BrowserView):

    \# Add view methods here
    pass
